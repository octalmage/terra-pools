{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["colors","App","useState","data","setData","lcd","useLCDClient","useEffect","fetchPools","a","market","poolDelta","delta","parameters","base_pool","terraSide","plus","lunaSide","pow","div","name","amt","times","toNumber","t","setInterval","clearTimeout","className","BarChart","width","height","Bar","isAnimationActive","label","dataKey","map","entry","index","Cell","fill","LabelList","position","ReferenceLine","isFront","value","y","stroke","YAxis","hide","type","ticks","interval","domain","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","getChainOptions","chainOptions","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2eAMMA,EAAS,CAAC,UAAW,WA+DZC,MA7Df,WACE,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACMC,EAAMC,cA4BZ,OA1BAC,qBAAU,WACR,IAAMC,EAAU,uCAAG,oCAAAC,EAAA,sEACGJ,EAAIK,OAAOC,YADd,cACXC,EADW,gBAEWP,EAAIK,OAAOG,aAFtB,gBAETC,EAFS,EAETA,UACFC,EAAYD,EAAUE,KAAKJ,GAC3BK,EAAWH,EAAUI,IAAI,GAAGC,IAAIJ,GAEtCX,EAAQ,CACN,CACEgB,KAAM,cACNC,IAAKN,EAAUO,MAAM,MAAUC,YAEjC,CACEH,KAAM,OACNC,IAAKJ,EAASK,MAAM,MAAUC,cAbjB,4CAAH,qDAkBhBf,IACA,IAAMgB,EAAIC,YAAYjB,EAAY,KAClC,OAAO,WACLkB,aAAaF,MAEd,CAACnB,EAAIK,SAGN,qBAAKiB,UAAU,MAAf,SACE,mCACE,+DACA,eAACC,EAAA,EAAD,CAAUC,MAAO,IAAKC,OAAQ,IAAK3B,KAAMA,EAAzC,UACE,eAAC4B,EAAA,EAAD,CAAKC,mBAAmB,EAAOC,OAAO,EAAMC,QAAQ,MAApD,UACG/B,EAAKgC,KAAI,SAACC,EAAOC,GAAR,OACR,cAACC,EAAA,EAAD,CAA4BC,KAAMvC,EAAOqC,EAAQ,KAAjD,eAAmBA,OAErB,cAACG,EAAA,EAAD,CAAWN,QAAQ,OAAOO,SAAS,WAErC,cAACC,EAAA,EAAD,CACEC,SAAS,EACTV,MAAO,CAAEQ,SAAU,MAAOG,MAAO,YACjCC,EAAG,IACHC,OAAO,SAET,cAACC,EAAA,EAAD,CACEC,MAAI,EACJC,KAAK,SACLC,MAAO,GACPJ,OAAO,UACPK,SAAU,EACVC,OAAQ,CAAC,KAAU,iBCjDhBC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCEdQ,cAAkBN,MAAK,SAACO,GACtBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,2BAAoBH,GAApB,aACE,cAAC,EAAD,SAGJI,SAASC,eAAe,YAO5Bf,M","file":"static/js/main.17d2c06c.chunk.js","sourcesContent":["import \"./App.css\";\nimport { useEffect, useState } from \"react\";\nimport { useLCDClient } from \"@terra-money/wallet-provider\";\nimport React from \"react\";\nimport { BarChart, Bar, Cell, YAxis, ReferenceLine, LabelList } from \"recharts\";\n\nconst colors = [\"#0088FE\", \"#FFBB28\"];\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const lcd = useLCDClient();\n\n  useEffect(() => {\n    const fetchPools = async () => {\n      const delta = await lcd.market.poolDelta();\n      const { base_pool } = await lcd.market.parameters();\n      const terraSide = base_pool.plus(delta);\n      const lunaSide = base_pool.pow(2).div(terraSide);\n\n      setData([\n        {\n          name: \"Stablecoins\",\n          amt: terraSide.times(0.000001).toNumber(),\n        },\n        {\n          name: \"LUNA\",\n          amt: lunaSide.times(0.000001).toNumber(),\n        },\n      ]);\n    };\n\n    fetchPools();\n    const t = setInterval(fetchPools, 7000);\n    return () => {\n      clearTimeout(t);\n    };\n  }, [lcd.market]);\n\n  return (\n    <div className=\"App\">\n      <center>\n        <h1>Terra Virtual Liquidity Pools</h1>\n        <BarChart width={800} height={400} data={data}>\n          <Bar isAnimationActive={false} label={true} dataKey=\"amt\">\n            {data.map((entry, index) => (\n              <Cell key={`cell-${index}`} fill={colors[index % 20]} />\n            ))}\n            <LabelList dataKey=\"name\" position=\"top\" />\n          </Bar>\n          <ReferenceLine\n            isFront={false}\n            label={{ position: \"top\", value: \"BasePool\" }}\n            y={50000000}\n            stroke=\"#000\"\n          />\n          <YAxis\n            hide\n            type=\"number\"\n            ticks={10}\n            stroke=\"#000000\"\n            interval={0}\n            domain={[49000000, 51000000]}\n          />\n        </BarChart>\n      </center>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport { getChainOptions, WalletProvider } from '@terra-money/wallet-provider'\n\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\ngetChainOptions().then((chainOptions) => {\n  ReactDOM.render(\n    <React.StrictMode>\n      <WalletProvider {...chainOptions}>\n        <App />\n      </WalletProvider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n  )\n})\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}